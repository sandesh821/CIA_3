pr: none
trigger: none

parameters:
#Service connection details
- name: ServiceConnection
  type: string
  default: arm-service-connection
  displayName: Service Connection

- name: AppRegDisplayName
  type: string
  default: arm-service-principal
  displayName: Registered App for Service Principal on customer subscription

- name: location
  type: string
  default: eastus
  values:
  - eastus
  - eastus2
  - southcentralus
  - southeastasia
  - westcentralus
  - westeurope
  - westus
  - westus2
  - centralus
  - australiaeast
  displayName: Location

#Text to derive resource names
- name: BaseName
  type: string
  default: fp2
  displayName: Base Name

- name: EnvName
  type: string
  default: test
  displayName: Environment Name (Base Name and Environment name together can be 16 chars AND has to be unique)

- name: ResourcegroupName
  type: string
  default: fp2-test-rg
  displayName: Resource group Name (If using already existing RG plz enter that)


#Conditions for deploying specific resources
- name: DeployAzureMLEnvironment
  default: true
  values:
  - true
  - false
  displayName: Deploy Azure ML Environment

- name: DeployAzureSQL
  default: false
  values:
  - true
  - false
  displayName: Deploy Azure SQL


- name: DeployWebApp
  default: false
  values:
  - true
  - false
  displayName: Deploy WebApp


- name: DeployFunctionApp
  default: false
  values:
  - true
  - false
  displayName: Deploy FunctionApp


- name: DeployAMLComputes
  default: false
  values:
  - true
  - false
  displayName: Deploy AML Compute

- name: amlcompute
  type: object
  default: 
    - vmSize: Standard_DS3_v2
      location: eastus
      minNodeCount: 0
      maxNodeCount: 20
    - vmSize: Standard_DS4_v2
      location: eastus
      minNodeCount: 0
      maxNodeCount: 20
    - vmSize: Standard_DS14_v2
      location: eastus
      minNodeCount: 0
      maxNodeCount: 20
    - vmSize: Standard_DS15_v2
      location: eastus
      minNodeCount: 0
      maxNodeCount: 20

- name: DeployComputeInstances
  default: false
  values:
  - true
  - false
  displayName: Deploy Compute Instance


- name: computeinstance
  type: object
  default: 
    - vmSize: STANDARD_DS3_V2
      location: eastus
      objectId: xxxxxx-xxxxx-xxxxx
      objectOwnerName: xxxx
    - vmSize: STANDARD_DS3_V2
      location: westus
      objectId: xxxxxx-xxxxx-xxxxx
      objectOwnerName: xxxx

- name: DeployDataStoreBlob
  default: false
  values:
  - true
  - false
  displayName: Deploy Data Store Blob


- name: AuthApproachToDeployDataStore
  type: string
  default: 'secret'
  values:
  - 'secret'
  - 'key'
- name: datastoreblob
  type: object
  default: 
    - datastoreName: workflowdata
      storageAccountName: fp2testamlsa
      containerName: workflowdata
      accountKeyOrSecret: fp2testamlsakey
      storageAccountSubscriptionId: 
      storageAccountResourceGroup: fp2_test_rg
 

variables:
# - template: /azure_cicd_pipelines/variables/variables.yml

  - name: sql.serverName
    value: '${{ parameters.BaseName }}${{ parameters.EnvName }}azsql'
  - name: sql.sqlAdmin
    value: dbsa
  - name: sql.sqlDBName
    value: forecastingdb

  - name: resourceGroup
    value: '${{ parameters.ResourcegroupName }}'
  - name: workspaceName
    value: '${{ parameters.BaseName }}_amlws'
  - name: storageAccountName
    value: '${{ parameters.BaseName }}${{ parameters.EnvName }}amlsa'
  - name: keyVaultName
    value: '${{ parameters.BaseName }}-${{ parameters.EnvName }}-aml-kv'
  - name: applicationInsightsName
    value: '${{ parameters.BaseName }}-${{ parameters.EnvName }}-aml-ai'
  - name: containerRegistryName
    value: '${{ parameters.BaseName }}${{ parameters.EnvName }}amlcr'

  - name: amlcompute.ClusterName
    value: '${{ parameters.BaseName }}Compute'
  - name: amlcompute.InstanceName
    value: '${{ parameters.BaseName }}ComputeInstance'
  - name: subscription_id
    value: ''
  
  - name: functionappName
    value: '${{ parameters.BaseName }}-${{ parameters.EnvName }}-fapp'
  - name: webappName
    value: '${{ parameters.BaseName }}-${{ parameters.EnvName }}-wapp'

  
stages:
- stage: 'Dev'
  displayName: 'Dev'
  jobs:
  - job: "Deploy_Azure_ML"
    condition: eq(${{ parameters.DeployAzureMlEnvironment }}, 'true')
    displayName: "Creating Azure ML Resources along with Client KeyVault Secrets"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: echo "##vso[task.setvariable variable=appId]$(az ad sp list --display-name ${{ parameters.AppRegDisplayName }} --outp tsv --query "[].appId")"
      displayName: 'Getting AppId/ClientId'

    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: echo "##vso[task.setvariable variable=objId]$(az ad sp show --id $(appId) --query id --out tsv)"
      displayName: 'Getting ObjectId for Keyvault access policies'

    - task: AzureResourceGroupDeployment@2
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroup)'
        location: ${{ parameters.location }}
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/amlenvironment.json'
        overrideParameters: '-baseName ${{ parameters.BaseName }} -envName ${{ parameters.EnvName }} -location ${{ parameters.location }} -workspace $(workspaceName) -storageAccount $(storageAccountName) -keyvault $(keyVaultName) -appInsights $(applicationInsightsName) -acr $(containerRegistryName) -objectId $(objId) -appId $(appId)'
        deploymentMode: 'Incremental'
      displayName: 'Deploy AML Resources to Azure'
  
  - job: "Deploy_Azure_SQL"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq(${{ parameters.DeployAzureSQL }}, 'true'))
    displayName: "Deploying Azure SQL and adding SQL secrets to the KeyVault"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az keyvault secret set --vault-name $(keyVaultName) --name forecasting-sql-server --value $(sql.serverName)
      displayName: 'Adding SQL Server to Keyvault Secret'

    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az keyvault secret set --vault-name $(keyVaultName) --name forecasting-database --value $(sql.sqlDBName)
      displayName: 'Adding SQL Database to Keyvault Secret'

    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az keyvault secret set --vault-name $(keyVaultName) --name forecasting-sql-user --value $(sql.sqlAdmin)
      displayName: 'Adding SQL User to Keyvault Secret'

    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: echo "##vso[task.setvariable variable=randStr]$(dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64 -w 0 | rev | cut -b 2- | rev)"
      displayName: 'Generate random SQL Password'

    - task: AzureCLI@2
      inputs:
        connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az keyvault secret set --vault-name $(keyVaultName) --name forecasting-sql-pwd --value $(randStr)
      displayName: 'Adding SQL Password to Keyvault Secret'

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        KeyVaultName: '$(keyVaultName)'
        SecretsFilter: 'forecasting-sql-pwd'
        RunAsPreJob: false
      displayName: 'Getting SQL Secrets'

    - task: AzureResourceGroupDeployment@2
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroup)'
        location: ${{ parameters.location }}
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/azuresql.json'
        overrideParameters: -serverName $(sql.serverName) -sqlDBName $(sql.sqlDBName) -location ${{ parameters.location }} -administratorLogin $(sql.sqlAdmin) -administratorLoginPassword $(forecasting-sql-pwd)
        deploymentMode: 'Incremental'
      displayName: 'Deploy Azure SQL'

  - job: "Deploy_Azure_ML_Compute_Clusters"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq(${{ parameters.DeployAMLComputes }}, 'true'))
    displayName: "Creating Azure ML Compute Clusters"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - ${{ each cluster in parameters.amlcompute }}:
      - task: AzureResourceGroupDeployment@2
        inputs:
          azureSubscription: '${{ parameters.ServiceConnection }}'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(resourceGroup)'
          location: ${{ parameters.location }}
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/amlcompute.json'
          overrideParameters: '-workspace $(workspaceName) -location ${{ cluster.location }} -vmSize ${{ cluster.vmSize }} -minNodeCount ${{ cluster.minNodeCount }} -maxNodeCount ${{ cluster.maxNodeCount }}'
          deploymentMode: 'Incremental'
        displayName: 'Create AML Compute'

  - job: "Deploy_Azure_Compute_Instances"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq(${{ parameters.DeployComputeInstances }}, 'true'))
    displayName: "Creating Azure ML Compute Instances"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - ${{ each instance in parameters.computeinstance }}:
      - task: AzureResourceGroupDeployment@2
        inputs:
          azureSubscription: '${{ parameters.ServiceConnection }}'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(resourceGroup)'
          location: ${{ parameters.location }}
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/computeinstance.json'
          overrideParameters: '-workspaceName $(workspaceName) -ownerName ${{ instance.objectOwnerName }} -location ${{ instance.location }} -vmSize ${{ instance.vmSize }} -objectId ${{ instance.objectId }}'
          deploymentMode: 'Incremental'
        displayName: 'Create AML Compute Instance'

  - job: "Deploy_Azure_ML_Blob_Datastores"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq(${{ parameters.DeployDataStoreBlob }}, 'true'))
    displayName: "Creating Azure ML Data Stores - Blob"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - ${{ each store in parameters.datastoreblob }}:
      - task: AzureCLI@2
        displayName: 'Getting Storage Account Key from Secret'
        condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq('${{ parameters.AuthApproachToDeployDataStore }}', 'secret'))
        inputs:
          connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: echo "##vso[task.setvariable variable=accountKey]$(az keyvault secret show --name ${{ store.accountKeyOrSecret }} --vault-name $(keyVaultName) --query "value")"
        
      - task: AzureCLI@2
        displayName: 'Getting Storage Account Key from Parameters'
        condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))), eq('${{ parameters.AuthApproachToDeployDataStore }}', 'key'))


        inputs:
          connectedServiceNameARM: '${{ parameters.ServiceConnection }}'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: echo "##vso[task.setvariable variable=accountKey]${{ store.accountKeyOrSecret }}"

      - task: AzureResourceGroupDeployment@2
        displayName: 'Create AML Compute Instance'
        inputs:
          azureSubscription: '${{ parameters.ServiceConnection }}'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(resourceGroup)'
          location: ${{ parameters.location }}
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/datastoreblob.json'
          overrideParameters: '-workspaceName $(workspaceName) -datastoreName ${{ store.datastoreName }} -storageAccountName ${{ store.storageAccountName }} -containerName ${{ store.containerName }} -accountKey $(accountKey) -storageAccountSubscriptionId ${{ store.storageAccountSubscriptionId }} -storageAccountResourceGroup ${{ store.storageAccountResourceGroup }} -location ${{ parameters.location }}'
          deploymentMode: 'Incremental'
          
  - job: "Deploy_Webapp"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))),  eq(${{ parameters.DeployWebApp }}, 'true'))
    displayName: "Creating Azure Web app"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@2
      displayName: 'Get Subscriptionid for Function app'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        scriptType: 'bash'
        scriptLocation: inlineScript
        inlineScript: |
            subscription_id=$(az account show --query 'id' --output tsv)
            echo "##vso[task.setvariable variable=subscription_id]$subscription_id"
    - task:  AzureResourceGroupDeployment@2
      displayName: 'Deploy WebApp with hosting plan'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroup)'
        location: ${{ parameters.location }}
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/webapp.json'
        overrideParameters: '-webAppName $(webappName) -location ${{ parameters.location }} -resourceGroupName $(resourceGroup) -subscriptionId $(subscription_id) -amlworkspaceName $(workspaceName) -amlstorageaccountName $(storageAccountName)'
        deploymentMode: 'Incremental'
    - task: AzureCLI@2
      displayName: 'Give WebApp Managed identity access to AML'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        scriptType: 'bash'
        scriptLocation: inlineScript
        inlineScript: |
            subscription_id=$(az account show --query 'id' --output tsv)
            identity_object_id=$(az webapp show --name $(webappName) --resource-group $(resourceGroup) --query "identity.principalId" -o tsv)
            az role assignment create --role "Contributor" --assignee-object-id  $identity_object_id --assignee-principal-type "ServicePrincipal" --scope /subscriptions/$subscription_id/resourceGroups/$(resourceGroup)/providers/Microsoft.MachineLearningServices/workspaces/$(workspaceName)
            az role assignment create --role "Contributor" --assignee-object-id  $identity_object_id --assignee-principal-type "ServicePrincipal" --scope /subscriptions/$subscription_id/resourceGroups/$(resourceGroup)/providers/Microsoft.Storage/storageAccounts/$(storageAccountName)
            az keyvault set-policy --name $(keyVaultName) --object-id $identity_object_id --secret-permissions get list --key-permissions get list
         

  - job: "Deploy_AzureFunctionApp"
    condition: and(or(succeeded(),not(eq(${{ parameters.DeployAzureMlEnvironment }}, 'true'))),  eq(${{ parameters.DeployFunctionApp }}, 'true'))
    displayName: "Creating Azure Function App"
    dependsOn: "Deploy_Azure_ML"
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@2
      displayName: 'Get Subscriptionid for Function app'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        scriptType: 'bash'
        scriptLocation: inlineScript
        inlineScript: |
            subscription_id=$(az account show --query 'id' --output tsv)
            echo "##vso[task.setvariable variable=subscription_id]$subscription_id"
    - task: AzureResourceGroupDeployment@2
      displayName: 'Deploy Azure Function App with hosting plan, storage account and application insights'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroup)'
        location: ${{ parameters.location }}
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/templates/functionapp.json'
        overrideParameters: '-functionAppName $(functionappName) -location ${{ parameters.location }} -resourceGroupName $(resourceGroup) -subscriptionId $(subscription_id) -amlworkspaceName $(workspaceName) -amlstorageaccountName $(storageAccountName)'
        deploymentMode: 'Incremental'
    - task: AzureCLI@2
      displayName: 'Add access policies to Key Vault'
      inputs:
        azureSubscription: '${{ parameters.ServiceConnection }}'
        scriptType: 'bash'
        scriptLocation: inlineScript
        inlineScript: |
            subscription_id=$(az account show --query 'id' --output tsv)
            identity_object_id=$(az functionapp show --name $(functionappName) --resource-group $(resourceGroup) --query "identity.principalId" -o tsv)
            acr_id=$(az acr show --resource-group $(resourceGroup) --name $(containerRegistryName) --query "id" -o tsv)
            az role assignment create --role "Contributor" --assignee-object-id  $identity_object_id --assignee-principal-type "ServicePrincipal" --scope /subscriptions/$subscription_id/resourceGroups/$(resourceGroup)/providers/Microsoft.MachineLearningServices/workspaces/$(workspaceName)
            az role assignment create --role "Contributor" --assignee-object-id  $identity_object_id --assignee-principal-type "ServicePrincipal" --scope /subscriptions/$subscription_id/resourceGroups/$(resourceGroup)/providers/Microsoft.Storage/storageAccounts/$(storageAccountName)
            az role assignment create --assignee $identity_object_id --role "acrpull" --scope $acr_id
            az keyvault set-policy --name $(keyVaultName) --object-id $identity_object_id --secret-permissions get list --key-permissions get list
  
    
    # #Example to use keyvault secrets while creating datastores. This process can be used for other resouces as well.
    # - task: AzureKeyVault@2
    #   inputs:
    #     azureSubscription: '${{ parameters.ServiceConnection }}'
    #     KeyVaultName: '$(keyVaultName)'
    #     SecretsFilter: 'storage-account-key'
    #     RunAsPreJob: false
    #   displayName: 'Getting Secrets'
    # - task: AzureResourceGroupDeployment@2
    #   inputs:
    #     azureSubscription: '${{ parameters.ServiceConnection }}'
    #     action: 'Create Or Update Resource Group'
    #     resourceGroupName: '$(resourceGroup)'
    #     location: ${{ parameters.location }}
    #     templateLocation: 'Linked artifact'
    #     csmFile: '$(Build.SourcesDirectory)/azure_cicd_pipelines/variables_templates/datastoreblob.json'
    #     overrideParameters: '-workspaceName $(workspaceName) -datastoreName $(datastoreName) -storageAccountName $(storageAccountName) -containerName $(containerName) -accountKey $(storage-account-key) -storageAccountResourceGroup $(resourceGroup) -skipValidation $(skipValidation) -location ${{ parameters.location }}'
    #     deploymentMode: 'Incremental'
    #   displayName: 'Create Blob Datastore'